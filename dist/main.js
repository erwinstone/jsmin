/*!
* @erwinstone/jsmin v1.0.1 (https://github.com/erwinstone/jsmin#readme)
* Copyright 2021 erwinstone
* Licensed under MIT (https://github.com/erwinstone/jsmin/blob/master/LICENSE)
*/
var e=Object.defineProperty;var g=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var w=Object.prototype.hasOwnProperty;var d=t=>e(t,"__esModule",{value:!0});var j=(t,n)=>{for(var i in n)e(t,i,{get:n[i],enumerable:!0})},y=(t,n,i,s)=>{if(n&&typeof n=="object"||typeof n=="function")for(let r of p(n))!w.call(t,r)&&(i||r!=="default")&&e(t,r,{get:()=>n[r],enumerable:!(s=g(n,r))||s.enumerable});return t};var $=(t=>(n,i)=>t&&t.get(n)||(i=y(d({}),n,1),t&&t.set(n,i),i))(typeof WeakMap!="undefined"?new WeakMap:0);var W={};j(W,{jsmin:()=>b,jsminRaw:()=>F});var o=require("fs"),c=require("path"),m=require("perf_hooks"),f=require("chokidar"),a=require("esbuild");const u={starting:t=>(console.log(`Starting '${t}'...`),m.performance.now()),finished:(t,n)=>{let i=Math.round(m.performance.now()-n),s=i>=1e3?`${(i/1e3).toFixed(2)} s`:`${Math.round(i)} ms`;s=s.toString(),console.log(`Finished '${t}' after ${s}`)}};async function l(t,n){n=n||[];const i=await o.promises.readdir(t);for(const s of i){const r=c.posix.join(t,s);(await o.promises.stat(r)).isDirectory()?n=await l(r,n):n.push(r)}return x(n)}function x(t){return t.filter(n=>n.endsWith(".js")&&!n.endsWith(".min.js"))}async function h(t){const n=u.starting("jsmin");let i=[];(await o.promises.stat(t)).isDirectory()?i=await l(t):i.push(t),await Promise.all(i.map(s=>{(0,a.build)({entryPoints:[s],outfile:s.slice(0,-2)+"min.js",minify:!0})})),u.finished("jsmin",n)}function P(t){(0,f.watch)(t,{ignoreInitial:!0}).on("all",(n,i)=>setTimeout(async()=>!i.endsWith(".min.js")&&await h(t),200)).on("ready",()=>console.log("Ready for changes"))}async function b(t){t.watch===!0?P(t.path):await h(t.path)}async function F(t){return(await(0,a.transform)(t,{minify:!0})).code}module.exports=$(W);0&&(module.exports={jsmin,jsminRaw});
